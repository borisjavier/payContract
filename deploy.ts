import { PaymentContract, Timestamp, N } from './src/contracts/payContract';
import { bsv, DefaultProvider, TestWallet, PubKey, Addr, ByteString, FixedArray } from 'scrypt-ts';
import { myPrivateKey, adminPublicKey } from './config';

async function main() {
    // Clave privada del publicador del contrato
    const privateKey = bsv.PrivateKey.fromWIF(myPrivateKey);
    
    // Convertir las claves públicas a objetos PubKey
    const adminPubKey: PubKey = PubKey(adminPublicKey);

    // Parámetros del contrato
    const qtyTokens = BigInt(50000); // Pago en quarks

        const datas: FixedArray<Timestamp, typeof N> = [1726087745n, 1726087805n, 1726087865n]

        const txids: FixedArray<ByteString, typeof N> = [
            '501a9448665a70e3efe50adafc0341c033e2f22913cc0fb6b76cbcb5c54e7836', '501a9448665a70e3efe50adafc0341c033e2f22913cc0fb6b76cbcb5c54e7836', '501a9448665a70e3efe50adafc0341c033e2f22913cc0fb6b76cbcb5c54e7836'    
        ]

    const ownerPrivKey = bsv.PrivateKey.fromWIF('L3rjyArDQLsB3vCtX31rdyyxWyX21rJLHPxYbLmECjNRh7yA3bsu')
    const owner = Addr(ownerPrivKey.toAddress().toByteString());//Dirección BSV-contrato del dueño del contrato
    const payScript = '0100000007907c47a5c55d786b98147f19b391021a447c8a51aca410168535b4cae1a2e198010000006a473044022044a6609f19892712261a25570c828fcfc83919651a43813c14dd953a015f27e9022000eb1eb940015462950223fd2c3fac0643db9873e0ddd4dc8e9f96b97b4b164a412103800b2a5c54483e71d28f55c4255cce781e2196b8ad6253f4155c7aa86603e6b9ffffffff164621062291cb32a6c7b895ff7e362550bed35672aa90bc4cef104e6455d03d020000006b483045022100807c3b8d7f0cf52251f35bfa1ebcfeb6e1fd6346b8f7b14a594e48a093df9a900220163704a97e9f9acd0e0d7815fa9d8173146af22334389f94ef37fee0a09154ab412103800b2a5c54483e71d28f55c4255cce781e2196b8ad6253f4155c7aa86603e6b9ffffffffcbcee11a226df9a2291e344d404f3a20a67c60dc3129f8c805c0e5db47ea4057020000006b483045022100fe5f8af2b05e79dd0c17ec95b4b8b788b571d65d94f469b33524149e3f69a5ab0220140e2ce3a1177ee0c883b7491b2833768da68c577c8a2f6ee60948433fb3dbf8412103800b2a5c54483e71d28f55c4255cce781e2196b8ad6253f4155c7aa86603e6b9ffffffff6ac1dd88be7c65a76a74cf4c2da8fbdb8a04964ddd307f406925e33cb04a8977020000006b483045022100c933b4d56730d64bc9867682977f8f7ca8f7e0fba234ac3be0e07a931d68841202204b5210dcc9b1001682b9d7d6e80c075974fd391886039fc96d6bec6dfa1b3d6e412103800b2a5c54483e71d28f55c4255cce781e2196b8ad6253f4155c7aa86603e6b9ffffffffebb91a4e8ec37fa811848559dd6c2c019e87a1655c282131deeee95f5e46f98a020000006b483045022100d3a5d35bbe6b5276e919c712aeba8fa227a253dfdd82808b8eaac9b78498bee10220434fd088abdc8c9222c31638ba7d4b586ceb159f8735a69a45ad2a15e2c18e7e412103800b2a5c54483e71d28f55c4255cce781e2196b8ad6253f4155c7aa86603e6b9ffffffff00bffc1e59c23c8dd4985365fa822b47d23aaf616e4f9469fc9c32fa94789db5020000006b483045022100b7e7264b46da7599b2f78c3cec7cd0cb3618a62c704c74d152bf52f081167284022064f7c16684569b1399d70d8deeb38236e5fe68f78cbe175d61ee292ec4095f1f412103800b2a5c54483e71d28f55c4255cce781e2196b8ad6253f4155c7aa86603e6b9ffffffff6095ea8e1f38b59873d4cd523dfcd79775eceee3217ccb5dc910bb08d1ab0e81040000006b4830450221009ffa1159d1749f6fc5d9b0860bcfc7abebb2820fe6cc9d184f59ea2b36e67e3c02205b8c5724f998b6610c8d6c0138149863f7f761bb5e3ca004c10bb85031f7fa3a412103ce147116287bed4db25d088bcc6a33c2ffc47fe39456ab8fea1ffb7a9e3799cfffffffff050000000000000000fd3504006a0372756e0105004d29047b22696e223a362c22726566223a5b22343634666134363637613136303631336336626635663062383031313863353164656564376464353364616234343862326630373566363962636366623964645f6f31222c22373261363165623939306666646236623338653566393535653139346665643566663662303134663735616336383233353339636535363133616561306265385f6f31225d2c226f7574223a5b2234373861643435383263353436383261356337373762353731366337663234313665366430353131316561363062313938633836656261393936313563386463222c2262346639613063663064396130393636643962376365626337313961343463346230303838376366376366346533323030363935386231313261643532623036222c2265393432343963366362643539613762663062313432646532626534353334396138653662383439376438373438633033393061376136323635663039343835225d2c2264656c223a5b2239356662616636366235623530393337633061626561336431653061343130353462316636376234333236393765333333346262356139326330393737323734222c2233643538343331353439343236663964373838346264383763343535333939643862653566313734356132393538613037646238333665306332373364316231222c2261626131366563363261383264393165626663653437353462356366353836636562623935336661656362626366386662353362626336393834303764636632222c2233346565363962666165313237316462313865323338613366636265363966306436313063366461313235376433346138323761636439396339376138363036222c2232323333336535393861653835646264303866646138353435616238333762656637633630643831653331306639386362333663373766343838636365653632225d2c22637265223a5b2231486e68507a71365a7533444c7452736d7456737674704578644837377a69773658222c223138646333414b64327935346878326f45744c5364634871363373525953364b5262225d2c2265786563223a5b7b226f70223a2243414c4c222c2264617461223a5b7b22246a6967223a307d2c22636f6d62696e65222c5b7b22246a6967223a317d2c7b22246a6967223a327d2c7b22246a6967223a337d2c7b22246a6967223a347d2c7b22246a6967223a357d5d5d7d2c7b226f70223a2243414c4c222c2264617461223a5b7b22246a6967223a307d2c2273656e64222c5b2231486e68507a71365a7533444c7452736d7456737674704578644837377a69773658222c31305d5d7d2c7b226f70223a2243414c4c222c2264617461223a5b7b22246a6967223a307d2c2273656e64222c5b223138646333414b64327935346878326f45744c5364634871363373525953364b5262222c325d5d7d5d7d01000000000000001976a91484fa37babd9fd471061ac2e7b71f7dbfdc9aa83b88ac01000000000000001976a914b82673be409a443185e63015c40348f2572cc56c88ac01000000000000001976a91453b51a4cfd039fd14cf1dc80ee3a3129213202c988acba570100000000001976a914b37a7c54087c2fb2e480c72ca29f937a92ee050988ac00000000';

    // Crear instancia del contrato original
    await PaymentContract.loadArtifact();
    const contract = new PaymentContract(owner, adminPubKey, payScript, qtyTokens, datas, txids);
    
    const signer = new TestWallet(
        privateKey,
        new DefaultProvider({
            network: bsv.Networks.mainnet,
        })
    );

    await contract.connect(signer);

    // Desplegar el contrato original
    const deployTx = await contract.deploy(1);
    console.log(`Contract deployed at ${deployTx.id}`);
    console.log(`State: ${JSON.stringify(contract.dataPayments)}`)
    console.log(`payScript: ${JSON.stringify(contract.payScript)}`)
}

main().catch(console.error);
